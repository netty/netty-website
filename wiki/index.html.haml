---
layout: jumbotronless
title: 'Netty.docs: Home'
---

.row
  .col-md-9
    #main-content
      %h1 Documentation
      %p
        Get started with the user guide and the API reference. Also, <a href="#{page.site_url}/community.html">join the community</a> to get more information.
      %ul
        - for r in site.major_releases
          %li
            Version #{r.simple_version}
            - if r.recommended?
              %small (Stable, Recommended)
            - else
              - if r.stable
                %small (Stable)
              - else
                %small (Development)
            %ul
              %li
                %a{ :href=>"user-guide-for-#{r.major_version}.x.html" } User guide
              %li
                %a{ :href=>"#{page.site_url}/#{r.simple_version}/api/index.html" } API reference
                %small (Javadoc)
              %li
                %a{ :href=>"#{page.site_url}/#{r.simple_version}/xref/index.html" } Source code
                %small (Xref)
              - if r.major_version > 3
                %li
                  %a{ :href=>"new-and-noteworthy-in-#{r.simple_version}.html" } New and Noteworthy

      %h2 3rd-party articles
      %p We often find there are people in the world who are much more talented in technical writing than we, and they kindly wrote <a href="related-articles.html">great articles</a> for the community.

      %h2 Examples
      %p
        There are several examples to help your experience with Netty. It is recommended to start from the first one and to finish to the last one.  You also might want to browse the complete list of examples:
        - for r in site.major_releases
          - example_link = '<a href="' + r.example_url(page) + '">' + r.simple_version + '</a>'
          - if not r.version == site.major_releases.last.version
            #{example_link},
          - else
            and #{example_link}.

      .tabbable
        %ul.nav.nav-tabs
          - for r in site.major_releases
            %li{ :class=>"#{r.recommended? ? 'active' : 'inactive'}" }
              %a{ :href=>"#example-#{r.major_version}", :data=>{ :toggle=>'tab' } }
                #{r.simple_version}
        .tab-content
          - for r in site.major_releases
            %div{ :id=>"example-#{r.major_version}", :class=>"tab-pane #{r.recommended? ? 'active' : 'inactive'}" }
              %h3 Fundamental
              %ul
                %li
                  %a{ :href=>"#{r.example_url(page, 'echo')}" } Echo
                  &dash;
                  the very basic client and server
                %li
                  %a{ :href=>"#{r.example_url(page, 'discard')}" } Discard
                  &dash;
                  see how to send an infinite data stream asynchronously without flooding the write buffer
                %li
                  %a{ :href=>"#{r.example_url(page, 'uptime')}" } Uptime
                  &dash;
                  implement automatic reconnection mechanism
              %h3 Text protocols
              %ul
                %li
                  %a{ :href=>"#{r.example_url(page, 'telnet')}" } Telnet
                  &dash;
                  a classic line-based network application
                %li
                  %a{ :href=>"#{r.example_url(page, 'qotm')}" } Quote of the Moment
                  &dash;
                  broadcast a UDP/IP packet
                %li
                  %a{ :href=>"#{r.example_url(page, 'securechat')}" } SecureChat
                  &dash;
                  an TLS-based chat server, derived from the Telnet example
              %h3 Binary protocols
              %ul
                %li
                  %a{ :href=>"#{r.example_url(page, 'objectecho')}" } ObjectEcho
                  &dash;
                  exchange serializable Java objects
                %li
                  %a{ :href=>"#{r.example_url(page, 'factorial')}" } Factorial
                  &dash;
                  write a stateful client and server with a custom binary protocol
                %li
                  %a{ :href=>"#{r.example_url(page, 'worldclock')}" } WorldClock
                  &dash;
                  rapid protocol prototyping with Google Protocol Buffers integration
              %h3 HTTP
              %ul
                %li
                  %a{ :href=>"#{r.example_url(page, 'http/snoop')}" } Snoop
                  &dash;
                  build your own extremely light-weight HTTP client and server
                %li
                  %a{ :href=>"#{r.example_url(page, 'http/file')}" } File server
                  &dash;
                  asynchronous large file streaming in HTTP
                %li
                  Web Sockets
                  (<a href="#{r.example_url(page, 'http/websocketx/client')}">Client</a> &amp;
                  <a href="#{r.example_url(page, 'http/websocketx/server')}">Server</a>)
                  &dash;
                  add a two-way full-duplex communication channel to HTTP using Web Sockets
                - if r.major_version > 3
                  %li
                    SPDY
                    (<a href="#{r.example_url(page, 'spdy/client')}">Client</a> &amp;
                    <a href="#{r.example_url(page, 'spdy/server')}">Server</a>)
                    &dash;
                    implement <a href="http://en.wikipedia.org/wiki/SPDY">SPDY</a> protocol
                  %li
                    %a{ :href=>"#{r.example_url(page, 'http/cors')}" } CORS demo
                    &dash;
                    implement <a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">cross-origin resource sharing</a>

              %h3 Advanced
              %ul
                %li
                  %a{ :href=>"#{r.example_url(page, 'proxy')}" } Proxy server
                  &dash;
                  write a highly efficient tunneling proxy server
                %li
                  %a{ :href=>"#{r.example_url(page, 'portunification')}" } Port unification
                  &dash;
                  run services with different protocols on a single TCP/IP port
              - if r.major_version > 3
                %h3
                  %abbr{ :title=>'UDP-based Data Transfer Protocol' } UDT
                %ul
                  %li
                    %a{ :href=>"#{r.example_url(page, 'udt/echo/bytes')}" } Byte streams
                    &dash;
                    use <a href="http://en.wikipedia.org/wiki/UDP-based_Data_Transfer_Protocol">UDT</a> in TCP-like byte streaming mode
                  %li
                    %a{ :href=>"#{r.example_url(page, 'udt/echo/message')}" } Message flow
                    &dash;
                    use <a href="http://en.wikipedia.org/wiki/UDP-based_Data_Transfer_Protocol">UDT</a> in UDP-like message delivery mode
                  %li
                    %a{ :href=>"#{r.example_url(page, 'udt/echo/rendezvousBytes')}" } Byte streams in symmetric peer-to-peer rendezvous connect mode
                  %li
                    %a{ :href=>"#{r.example_url(page, 'udt/echo/rendezvous')}" } Message flow in symmetric peer-to-peer rendezvous connect mode

  .col-md-3
    = site.default_sidebar

