---
layout: news-item
title: 'Netty 4.0.0.Alpha4 is out'
author: normanmaurer
disqus_identifier: 6451824531527622584
---

:plain
  <div class="entry-content">
  <p>The next Alpha release of the upcoming major version release, is ready to get tested by you.</p>
  <p>We are very confinced that the API is quite stable at this point and so you should not expect to many API breakages anymore. So if you plan to start a new project it may be the right time to you on focus on Netty 4.0.0 for it.</p>
  <div class="wikimodel-emptyline"></div>
  <p>For all fixed bugs and changes please checkout our <span class="wikiexternallink"><a href="https://github.com/netty/netty/issues?q=milestone%3A4.0.0.Alpha4">issue tracker</a></span>. </p>
  <p>You can find the release on  <span class="wikiexternallink"><a href="http://netty.io/downloads.html">the download page</a></span>, or just grab it via maven as usual.</p>
  <p>Please let us know if you have any problems or questions. And as by the way, we love pull-requests / contributions <img src="/resources/icons/silk/emoticon_wink.png" class="wikimodel-freestanding" alt="emoticon_wink"></p>
  <p>We really hope you will enjoy this new release as much as we do <img src="/resources/icons/silk/emoticon_smile.png" class="wikimodel-freestanding" alt="emoticon_smile"></p>
  <p>Have fun...</p>
  <div class="wikimodel-emptyline"></div>
  <h2 id="HImportantchanges"><span>Important changes</span></h2>
  <p><span>This release ships the workaround for the epoll(..) bug that we also released as part of 3.5.7.Final!</span></p>
  <p>This mentioned epoll(..) bug can lead to very excessive cpu-spinning, which will most likely produce 100% cpu usage on the core that runs the thread of the NioEventLoop.  For more informations please see <span class="wikiexternallink"><a href="https://github.com/netty/netty/issues/327">#327</a></span>, <span class="wikiexternallink"><a href="https://github.com/netty/netty/pull/565">#565</a></span>.</p>
  <p>The workaround is disabled by default at the moment. This is because we want to be sure its "mature" enough before enable it by default. Anyway, if you got hit by the bug enable the workaround via the <em>org.jboss.netty.epoolBugWorkaround</em>  System Property.</p>
  <div class="wikimodel-emptyline"></div>
  <script src="https://gist.github.com/3713638.js"></script><p>Also we had some important bug-fixes and improvements in the AIO transport( mostly driven by <span class="wikiexternallink"><a href="http://www.kaazing.com">Kaazing </a></span>)and WebSocket bugfixes (mostly driven by <span class="wikiexternallink"><a href="http://www.twitter.com">Twitter</a></span>). Thank you <img src="/resources/icons/silk/emoticon_smile.png" class="wikimodel-freestanding" alt="emoticon_smile"></p>
  <div class="wikimodel-emptyline"></div>
  <h2 id="HUpgradenotes"><span>Upgrade notes</span></h2>
  <p>If you plan to upgrade from previous 4.0.0 Alpha releases be aware of one little api breakage which will probably effect you. Its about the Bootstrap and ServerBootstrap.. The breakage was needed to allow the reuse of Bootstrap and ServerBootstrap instances.</p>
  <div class="wikimodel-emptyline"></div>
  <p>The old way of configure it:</p>
  <script src="https://gist.github.com/3713663.js"></script><div class="wikimodel-emptyline"></div>
  <p>The new one in 4.0.0.Alpha4:</p>
  <script src="https://gist.github.com/3713665.js"></script><div class="wikimodel-emptyline"></div>
  <p>The important change here is that the Bootstrap.channel(..) method now takes a Class argument, before it was the actual instance. This allows the Bootstrap to create instances by its own when Boostream.bind(..) is called. If your Channel implementation does not have a default constructor or you need to pass more informations to the Channel when its created, just use the new Bootstrap.channel(..) method that allows to get a Bootstrap.ChannelFactory instances to get passed.</p>
  <script src="https://gist.github.com/3713712.js"></script><p>If you upgrade from a 3.x release be sure to read <span class="wikiexternallink"><a href="http://netty.io/wiki/new-and-noteworthy.html">the complete summary of changes</a></span>.</p>
  <h2 id="HNewfeatures"><span>New features</span></h2>
  <h3 id="HSCTPsupport"><span>SCTP support</span></h3>
  <p>Netty 4.0.0.Alpha4 comes with SCTP support included. This will only work on Operation Systems that ship with SCTP support (for example linux). Also be sure that you install the user-space libs that you need to access it.</p>
  <p>For example on Ubuntu this would be done via:</p>
  <pre><span># apt-get install libsctp1</span></pre>
  <p>One fedora you will need some extra kernel modules:</p>
  <pre><span># yum install kernel-modules-extra.x86_64 lksctp-tools.x86_64</span></pre>
  <p>After that you should be able to give it a spin. You can find the example code <span class="wikiexternallink"><a title="SCTP examples" href="https://github.com/netty/netty/tree/netty-4.0.0.Alpha4/example/src/main/java/io/netty/example/sctp">here</a></span> for Client and Server implementations. Thanks again to <span class="wikiexternallink"><a href="https://github.com/jestan">Jestan Nirojan</a></span> for porting it over to the new API.</p>
  <div class="wikimodel-emptyline"></div>
  <h3 id="HWebSocketenhancements"><span>WebSocket enhancements</span></h3>
  <p>Another change to worth mention was contributed by <span class="wikiexternallink"><a href="https://github.com/danbev">Daniel Bevenius</a></span>. This change makes it even easier to write WebSocket Server with Netty as it will help to do all the ground work for you. This allows you to only focus on the core implementation. Before you had to write code for doing the handshake and also handle all the other basics( like handle the CloseWebSocketFrame and PingWebSocketFrame). All of these boiler-blade code is gone now!</p>
  <div class="wikimodel-emptyline"></div>
  <p>Checkout a basic example of using the new handler:</p>
  <script src="https://gist.github.com/3713842.js"></script><h3 id="HSuspendreads2Faccept"><span>Suspend reads/accept</span></h3>
  <p>Sometimes it can be helpful for you to suspend reads on channel, this allows you to not need to buffer all of the data in your application code till you are ready to process again. This feature was present in 3.x also but was a bit error-phrone so we thought we should give it some more love to make it a bit more useful.</p>
  <p>In 3.x you would just set the Channel readable/non-readable:</p>
  <div class="wikimodel-emptyline"></div>
  <script src="https://gist.github.com/3713980.js"></script><p>The problem with this was that it was easy to "break" things when one ChannelHandler disabled the Channel to read and some other enabled it again because of some intern logic which was not aware of the other ChannelHandler that was suspend reads before.</p>
  <p>To overcome this problem we changed the implementation to be slightly different. Now you need to suspend reads / continue reads on the actual ChannelHandlerContext which is bound to the ChannelHandler. If at least one ChannelHandlerContext has reads suspend it will handled by the Channel this way. This way you don't need to worry about other ChannelHandler in the pipeline and about the changes they make.</p>
  <div class="wikimodel-emptyline"></div>
  <script src="https://gist.github.com/3714017.js"></script><p>But that's not all <img src="/resources/icons/silk/emoticon_smile.png" class="wikimodel-freestanding" alt="emoticon_smile"> Its now possible to suspend accepting more connections/channels when you use Netty on the Server-side. For this just use something like that:</p>
  <div class="wikimodel-emptyline"></div>
  <script src="https://gist.github.com/3714032.js"></script>
  </div>
